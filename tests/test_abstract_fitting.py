
# This file was *autogenerated* from the file test_abstract_fitting.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_48 = Integer(48); _sage_const_12 = Integer(12); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_20384954673p0 = RealNumber('20384954673.0'); _sage_const_2332689559p0 = RealNumber('2332689559.0'); _sage_const_1p2714323312172494e23 = RealNumber('1.2714323312172494e+23'); _sage_const_4665379111p0 = RealNumber('4665379111.0'); _sage_const_24 = Integer(24); _sage_const_169p0 = RealNumber('169.0'); _sage_const_58p0 = RealNumber('58.0'); _sage_const_36 = Integer(36)
### separator line ###
from .context import sagednd
import sagednd.abstract_fitting as fit

def test_tune():
    __tmp__=var("error"); square_error = symbolic_expression(error**_sage_const_2 ).function(error)
    v = [_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ,_sage_const_5 ]
    __tmp__=var("x,a,b,c"); f = symbolic_expression(_sage_const_3 *x*a + _sage_const_2 *b + c).function(x,a,b,c)
    (p,l)= fit.tune(v, square_error, f, [a,b,c], matrix([[_sage_const_3 ],[_sage_const_1 ],[_sage_const_4 ]]), _sage_const_1 /_sage_const_2 ,_sage_const_4 )
    assert p == matrix([[_sage_const_20384954673p0 ],[_sage_const_4665379111p0 ],[_sage_const_2332689559p0 ]])
    assert l == _sage_const_1p2714323312172494e23 

def test_update_parameters():
    p_s = matrix([_sage_const_1 ,_sage_const_2 ]).transpose()
    __tmp__=var("x,a,b"); f = symbolic_expression(a*x+b).function(x,a,b)
    p_l = f.args()[_sage_const_1 :]
    L = (f(x=_sage_const_1 )-_sage_const_1 )**_sage_const_2  + (f(x=_sage_const_2 )-_sage_const_8 )**_sage_const_2  + (f(x=_sage_const_3 )-_sage_const_7 )**_sage_const_2 
    l_g = jacobian(L, p_l).transpose()
    l_r = _sage_const_7 
    p = fit.update_parameters(p_s, [a,b], l_g, l_r)
    assert p == matrix([[_sage_const_169p0 ],[ _sage_const_58p0 ]])

def test_loss_gradient():
    __tmp__=var("error"); square_error = symbolic_expression(error**_sage_const_2 ).function(error)
    __tmp__=var("x,a,b,c"); f = symbolic_expression((_sage_const_3 *x*a + _sage_const_2 *b + c)**_sage_const_2 ).function(x,a,b,c)
    v = [_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ,_sage_const_5 ]
    lg = fit.loss_gradient(v, square_error, f, [a,b,c]) 
    assert lg == matrix([[_sage_const_48 *((_sage_const_12 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_5 )*(_sage_const_12 *a + _sage_const_2 *b + c) + _sage_const_36 *((_sage_const_9 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_4 )*(_sage_const_9 *a + _sage_const_2 *b + c) + _sage_const_24 *((_sage_const_6 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_3 )*(_sage_const_6 *a + _sage_const_2 *b + c) + _sage_const_12 *((_sage_const_3 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_2 )*(_sage_const_3 *a + _sage_const_2 *b + c)],[_sage_const_8 *((_sage_const_12 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_5 )*(_sage_const_12 *a + _sage_const_2 *b + c) + _sage_const_8 *((_sage_const_9 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_4 )*(_sage_const_9 *a + _sage_const_2 *b + c) + _sage_const_8 *((_sage_const_6 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_3 )*(_sage_const_6 *a + _sage_const_2 *b + c) + _sage_const_8 *((_sage_const_3 *a + _sage_const_2 *b +c)**_sage_const_2  - _sage_const_2 )*(_sage_const_3 *a + _sage_const_2 *b + c) + _sage_const_8 *((_sage_const_2 *b + c)**_sage_const_2  - _sage_const_1 )*(_sage_const_2 *b + c)],[_sage_const_4 *((_sage_const_12 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_5 )*(_sage_const_12 *a + _sage_const_2 *b + c) + _sage_const_4 *((_sage_const_9 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_4 )*(_sage_const_9 *a + _sage_const_2 *b + c) + _sage_const_4 *((_sage_const_6 *a + _sage_const_2 *b + c)**_sage_const_2  - _sage_const_3 )*(_sage_const_6 *a + _sage_const_2 *b + c) + _sage_const_4 *((_sage_const_3 *a + _sage_const_2 *b +  c)**_sage_const_2  - _sage_const_2 )*(_sage_const_3 *a + _sage_const_2 *b + c) + _sage_const_4 *((_sage_const_2 *b + c)**_sage_const_2  - _sage_const_1 )*(_sage_const_2 *b + c)]])

def test_loss_function():
    __tmp__=var("error"); square_error = symbolic_expression(error**_sage_const_2 ).function(error)
    __tmp__=var("x,a,b,c"); f = symbolic_expression(_sage_const_3 *x*a + _sage_const_2 *b + c).function(x,a,b,c)
    v = [_sage_const_1 ,_sage_const_2 ,_sage_const_3 ,_sage_const_4 ,_sage_const_5 ]                                                  
    lf = fit.loss_function(v, square_error, f)
    assert lf == (_sage_const_12 *a + _sage_const_2 *b + c - _sage_const_5 )**_sage_const_2  + (_sage_const_9 *a + _sage_const_2 *b + c - _sage_const_4 )**_sage_const_2  + (_sage_const_6 *a + _sage_const_2 *b + c - _sage_const_3 )**_sage_const_2  + (_sage_const_3 *a + _sage_const_2 *b + c - _sage_const_2 )**_sage_const_2  + (_sage_const_2 *b + c - _sage_const_1 )**_sage_const_2 

